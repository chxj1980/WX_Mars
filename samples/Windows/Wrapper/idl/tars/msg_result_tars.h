// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 1.0.1.
// **********************************************************************

#ifndef __MSGCOMMON_H_
#define __MSGCOMMON_H_

#include <map>
#include <string>
#include <vector>
#include "tars/Tars.h"
using namespace std;


namespace MessageService
{
	enum MsgResultCode
	{
		MsgResultSuccess = 0,
		MsgResultParaError = 1,
		MsgResultRepeat = 2,
		MsgResultRedisDBError = 5,
		MsgResultMysqlError = 6,
		MsgResultDBError = 7,
		MsgResultMemNotEnough = 8,
		MsgResultNoPrivilege = 9,
		MsgResultUserOffline = 10,
		MsgResultUserIdNull = 11,
		MsgResultUserIdOverLen = 12,
		MsgResultUserIdErr = 13,
		MsgResultUserNotInGroup = 17,
		MsgResultUserListEmpty = 18,
		MsgResultUserOnline = 19,
		MsgResultGroupIdNull = 20,
		MsgResultGroupIdOverLen = 21,
		MsgResultGroupEpmty = 22,
		MsgResultMsgEmpty = 34,
		MsgResultMsgTooShort = 35,
		MsgResultMsgInvalidFormat = 36,
		MsgResultNoReceiver = 37,
		MsgResultSendHimself = 38,
		MsgResultUnknowMessageType = 39,
		MsgResultTokenInvalid = 40,
		MsgResultTokenExpired = 41,
		MsgResultServiceUnavailable = 50,
		MsgResultBrokerPushErr = 51,
		MsgResultIOSPushErr = 52,
		MsgResultOffserverErr = 53,
		MsgResultAuthserverErr = 54,
		MsgResultExceedLimit = 60,
		MsgResultLoginFailed = 70,
		MsgResultUnlogined = 71,
		MsgResultOtherError = 99,
		MsgResultNotSupport = 200,
	};
	inline string etos(const MsgResultCode & e)
	{
		switch (e)
		{
		case MsgResultSuccess: return "MsgResultSuccess";
		case MsgResultParaError: return "MsgResultParaError";
		case MsgResultRepeat: return "MsgResultRepeat";
		case MsgResultRedisDBError: return "MsgResultRedisDBError";
		case MsgResultMysqlError: return "MsgResultMysqlError";
		case MsgResultDBError: return "MsgResultDBError";
		case MsgResultMemNotEnough: return "MsgResultMemNotEnough";
		case MsgResultNoPrivilege: return "MsgResultNoPrivilege";
		case MsgResultUserOffline: return "MsgResultUserOffline";
		case MsgResultUserIdNull: return "MsgResultUserIdNull";
		case MsgResultUserIdOverLen: return "MsgResultUserIdOverLen";
		case MsgResultUserIdErr: return "MsgResultUserIdErr";
		case MsgResultUserNotInGroup: return "MsgResultUserNotInGroup";
		case MsgResultUserListEmpty: return "MsgResultUserListEmpty";
		case MsgResultUserOnline: return "MsgResultUserOnline";
		case MsgResultGroupIdNull: return "MsgResultGroupIdNull";
		case MsgResultGroupIdOverLen: return "MsgResultGroupIdOverLen";
		case MsgResultGroupEpmty: return "MsgResultGroupEpmty";
		case MsgResultMsgEmpty: return "MsgResultMsgEmpty";
		case MsgResultMsgTooShort: return "MsgResultMsgTooShort";
		case MsgResultMsgInvalidFormat: return "MsgResultMsgInvalidFormat";
		case MsgResultNoReceiver: return "MsgResultNoReceiver";
		case MsgResultSendHimself: return "MsgResultSendHimself";
		case MsgResultUnknowMessageType: return "MsgResultUnknowMessageType";
		case MsgResultTokenInvalid: return "MsgResultTokenInvalid";
		case MsgResultTokenExpired: return "MsgResultTokenExpired";
		case MsgResultServiceUnavailable: return "MsgResultServiceUnavailable";
		case MsgResultBrokerPushErr: return "MsgResultBrokerPushErr";
		case MsgResultIOSPushErr: return "MsgResultIOSPushErr";
		case MsgResultOffserverErr: return "MsgResultOffserverErr";
		case MsgResultAuthserverErr: return "MsgResultAuthserverErr";
		case MsgResultExceedLimit: return "MsgResultExceedLimit";
		case MsgResultLoginFailed: return "MsgResultLoginFailed";
		case MsgResultUnlogined: return "MsgResultUnlogined";
		case MsgResultOtherError: return "MsgResultOtherError";
		case MsgResultNotSupport: return "MsgResultNotSupport";
		default: return "";
		}
	}
	inline int stoe(const string & s, MsgResultCode & e)
	{
		if (s == "MsgResultSuccess") { e = MsgResultSuccess; return 0; }
		if (s == "MsgResultParaError") { e = MsgResultParaError; return 0; }
		if (s == "MsgResultRepeat") { e = MsgResultRepeat; return 0; }
		if (s == "MsgResultRedisDBError") { e = MsgResultRedisDBError; return 0; }
		if (s == "MsgResultMysqlError") { e = MsgResultMysqlError; return 0; }
		if (s == "MsgResultDBError") { e = MsgResultDBError; return 0; }
		if (s == "MsgResultMemNotEnough") { e = MsgResultMemNotEnough; return 0; }
		if (s == "MsgResultNoPrivilege") { e = MsgResultNoPrivilege; return 0; }
		if (s == "MsgResultUserOffline") { e = MsgResultUserOffline; return 0; }
		if (s == "MsgResultUserIdNull") { e = MsgResultUserIdNull; return 0; }
		if (s == "MsgResultUserIdOverLen") { e = MsgResultUserIdOverLen; return 0; }
		if (s == "MsgResultUserIdErr") { e = MsgResultUserIdErr; return 0; }
		if (s == "MsgResultUserNotInGroup") { e = MsgResultUserNotInGroup; return 0; }
		if (s == "MsgResultUserListEmpty") { e = MsgResultUserListEmpty; return 0; }
		if (s == "MsgResultUserOnline") { e = MsgResultUserOnline; return 0; }
		if (s == "MsgResultGroupIdNull") { e = MsgResultGroupIdNull; return 0; }
		if (s == "MsgResultGroupIdOverLen") { e = MsgResultGroupIdOverLen; return 0; }
		if (s == "MsgResultGroupEpmty") { e = MsgResultGroupEpmty; return 0; }
		if (s == "MsgResultMsgEmpty") { e = MsgResultMsgEmpty; return 0; }
		if (s == "MsgResultMsgTooShort") { e = MsgResultMsgTooShort; return 0; }
		if (s == "MsgResultMsgInvalidFormat") { e = MsgResultMsgInvalidFormat; return 0; }
		if (s == "MsgResultNoReceiver") { e = MsgResultNoReceiver; return 0; }
		if (s == "MsgResultSendHimself") { e = MsgResultSendHimself; return 0; }
		if (s == "MsgResultUnknowMessageType") { e = MsgResultUnknowMessageType; return 0; }
		if (s == "MsgResultTokenInvalid") { e = MsgResultTokenInvalid; return 0; }
		if (s == "MsgResultTokenExpired") { e = MsgResultTokenExpired; return 0; }
		if (s == "MsgResultServiceUnavailable") { e = MsgResultServiceUnavailable; return 0; }
		if (s == "MsgResultBrokerPushErr") { e = MsgResultBrokerPushErr; return 0; }
		if (s == "MsgResultIOSPushErr") { e = MsgResultIOSPushErr; return 0; }
		if (s == "MsgResultOffserverErr") { e = MsgResultOffserverErr; return 0; }
		if (s == "MsgResultAuthserverErr") { e = MsgResultAuthserverErr; return 0; }
		if (s == "MsgResultExceedLimit") { e = MsgResultExceedLimit; return 0; }
		if (s == "MsgResultLoginFailed") { e = MsgResultLoginFailed; return 0; }
		if (s == "MsgResultUnlogined") { e = MsgResultUnlogined; return 0; }
		if (s == "MsgResultOtherError") { e = MsgResultOtherError; return 0; }
		if (s == "MsgResultNotSupport") { e = MsgResultNotSupport; return 0; }

		return -1;
	}

	struct MessageResult : public tars::TarsStructBase
	{
	public:
		static string className()
		{
			return "MessageService.MessageResult";
		}
		static string MD5()
		{
			return "5d9fff36e1fe92ebac1b1c8cba6295a6";
		}
		MessageResult()
			:code(MsgResultSuccess), info("")
		{
		}
		void resetDefautlt()
		{
			code = MsgResultSuccess;
			info = "";
		}
		template<typename WriterT>
		void writeTo(tars::TarsOutputStream<WriterT>& _os) const
		{
			_os.write((tars::Int32)code, 0);
			_os.write(info, 1);
		}
		template<typename ReaderT>
		void readFrom(tars::TarsInputStream<ReaderT>& _is)
		{
			resetDefautlt();
			tars::Int32 eTemp0 = MsgResultSuccess;
			_is.read(eTemp0, 0, true);
			code = (MessageService::MsgResultCode)eTemp0;
			_is.read(info, 1, true);
		}
		ostream& display(ostream& _os, int _level = 0) const
		{
			tars::TarsDisplayer _ds(_os, _level);
			_ds.display((tars::Int32)code, "code");
			_ds.display(info, "info");
			return _os;
		}
		ostream& displaySimple(ostream& _os, int _level = 0) const
		{
			tars::TarsDisplayer _ds(_os, _level);
			_ds.displaySimple((tars::Int32)code, true);
			_ds.displaySimple(info, false);
			return _os;
		}
	public:
		MessageService::MsgResultCode code;
		std::string info;
	};
	inline bool operator==(const MessageResult&l, const MessageResult&r)
	{
		return l.code == r.code && l.info == r.info;
	}
	inline bool operator!=(const MessageResult&l, const MessageResult&r)
	{
		return !(l == r);
	}


}



#endif
